* trimElement seems buggy
This seems to be causing layout issues. In some cases it was
stripping valid BRs that followed non-trimmable nodes.
Maybe when iterating its considering siblings that were already
removed? How could this bug out so badly?

* Side thought: Why mutate? Why not just expand the query to account for variations?
This is a similar thought about element removal, unwrapping, etc. Why modify
the original if we are returning a representation of the original?
* better support for live document scrubbing, related to above

Maybe i can drop all trimming/unwrapping/etc, update other methods to account
for this. Armchair costs outweight supposed benefits.

Maybe it is that scrubbing and scoring are two different functions.

I do not truly need minimization/compression.

* NOTE: does unwrapping best element cause any issues if the best element
itself has semantic value?

* review gebtn, maybe i do not need to keep calling it?
e.g. maybe i should just do a single querySelectorAll instead if its not-live?
or is it better to re-call it to avoid read-after-delete issues?

* support iframes and embed objects and audio/video
* for all iframes, set sandbox attribute?

* Turn into a rule-based processing system?

* idea bout external vs internal links, diff weights
e.g. if same origin then +- x else +- y. internal i assume
to be more likely to be boilerplate because part of sites
template but articles tend to link to others. also more objective
because authors hate to link outside as anti-sticky. would
of course fail for in-content same origin links but as a whole
these are less likely.

* better credits to research papers

TODO: support <body>text</body> (text under root node)? How?

TODO: anchors beginning with # before resolution are
probably table of contents links. We should differentiate
See http://plato.stanford.edu/entries/other-minds/
where the TOC was missed

Idea: rather than applying score in scoreElement, we should be trying to
just get the score from each function and accumulating
it here. However, there is the issue that we implicitly
score other elements when scoring the current element
which means evil side effects

TODO: in deriveAnchorFeatures, if the main function ever receives a
document without a body or without a root, is this an infinite
loop?


go after the share subsection specifically and filter it
