// Copyright 2014 Josh Froelich. All rights reserved.
// Use of this source code is governed by a MIT-style license
// that can be found in the LICENSE file


// TODO: use iife

'use strict';

var lucu = lucu || {};

lucu.feed = lucu.feed || {};

lucu.feed.add = function(db, feed, oncomplete, onerror) {
  // Uses medialize URI lib
  function filterScheme(url) {
    var uri = URI(url);
    uri.protocol('');
    var result = uri.toString().substring(2);
    // console.debug(result);
    return result;
  }

  var cleanedFeed = lucu.feed.sanitize(feed);

  var storableFeed = {};
  storableFeed.url = feed.url;
  storableFeed.schemeless = filterScheme(storableFeed.url);

  // TODO: title must be somehow defined or else it wont be returned
  // when sorting by title in forAllFeeds in the options page. This is
  // kind of ugly and should eventually be improved.

  if(cleanedFeed.title) {
    storableFeed.title = cleanedFeed.title;
  } else {
    storableFeed.title = '';
  }

  if(cleanedFeed.description) {
    storableFeed.description = cleanedFeed.description;
  }

  if(cleanedFeed.link) {
    storableFeed.link =  cleanedFeed.link;
  }

  if(cleanedFeed.date) {
    storableFeed.date = cleanedFeed.date;
  }

  // The fetched date might not be set when importing feeds from
  // an OPML file or when subscribing to a feed while offline
  if(feed.fetched) {
    storableFeed.fetched = feed.fetched;
  }

  storableFeed.created = Date.now();

  // This is expected to trigger onerror when adding a feed
  // where schemeless is not unique because of the unique flag
  // on feedStore.schemelessIndex

  var addFeedTransaction = db.transaction('feed','readwrite');
  var feedStore = addFeedTransaction.objectStore('feed');
  var addFeedRequest = feedStore.add(storableFeed);
  addFeedRequest.onerror = onerror;
  addFeedRequest.onsuccess = lucu.feed.onAddSuccess.bind(addFeedRequest,
    db, storableFeed, feed.entries, oncomplete);
};

lucu.feed.onAddSuccess = function(db, storableFeed, entries, onComplete) {
  // NOTE: expects this instanceof IDBRequest

  // Update using the id generated by indexedDB
  storableFeed.id = this.result;

  // Handoff to mergeAll to insert the entries for the feed, if there are any.
  // mergeAll has its own logic of dealing with no entries and will later handoff
  // to onComplete
  lucu.entry.mergeAll(db, storableFeed, entries, onComplete);
};


/**
 * Updates the localFeed according to the properties in remoteFeed,
 * merges in any new entries present in the remoteFeed, and then
 * calls oncomplete. This expects local feed to be the feed object
 * loaded from the feedStore in the database.
 * TODO: the caller of lucu.feed.update needs to set feed.fetched
 * TODO: the caller of lucu.feed.update should pass in last modified
 * date of the remote xml file so we can avoid pointless updates
 * TODO: lucu.feed.update should not be changing the date updated unless
 * something actually changed.
 */
lucu.feed.update = function(db, localFeed, remoteFeed, oncomplete) {

  var cleanedFeed = lucu.feed.sanitize(remoteFeed);

  if(cleanedFeed.title) {
    localFeed.title = cleanedFeed.title;
  }

  if(cleanedFeed.description) {
    localFeed.description = cleanedFeed.description;
  }

  if(cleanedFeed.link) {
    localFeed.link = cleanedFeed.link;
  }

  if(cleanedFeed.date) {
    localFeed.date = cleanedFeed.date;
  }

  localFeed.fetched = remoteFeed.fetched;

  localFeed.updated = Date.now();

  var putFeedTransaction = db.transaction('feed','readwrite');
  var feedStore = putFeedTransaction.objectStore('feed');
  var putFeedRequest = feedStore.put(localFeed);
  putFeedRequest.onerror = console.debug;

  // TODO: move this out
  //putFeedRequest.onsuccess = function() {
  //  lucu.entry.mergeAll(db, localFeed, remoteFeed.entries, oncomplete);
  //}

  var merge = lucu.entry.mergeAll.bind(this, db, localFeed,
    remoteFeed.entries, oncomplete);
  putFeedRequest.onsuccess = merge;
};

/**
 * Returns a sanitized version of a feed object.
 * The object is not modified. Only certain
 * properties are sanitized and included in the returned object
 * TODO: deal with html entities
 */
lucu.feed.sanitize = function(dirtyFeed) {
  var cleanFeed = {};

  var title = lucu.feed.sanitizeProp(dirtyFeed.title);
  if(title) {
    cleanFeed.title = title;
  }

  var description = lucu.feed.sanitizeProp(dirtyFeed.description);
  if(description) {
    cleanFeed.description = description;
  }

  var link = lucu.feed.sanitizeProp(dirtyFeed.link);
  if(link) {
    cleanFeed.link = link;
  }

  if(dirtyFeed.date) {
    cleanFeed.date = dirtyFeed.date;
  }

  return cleanFeed;
};

/**
 * TODO: should we replace HTML entities after
 * stripping tags? Some entities? All entities?
 *
 * TODO: does this function belong somewhere else?
 */
lucu.feed.sanitizeProp = function(str) {

  if(!str) {
    return;
  }

  str = lucu.stripTags(str);

  if(str) {
    str = lucu.stripControls(str);
  }

  // TODO: this should be a call to a separate function
  // or maybe merged with lucu.string.stripControls
  // (one pass instead of two)
  if(str) {
    str = str.replace(/\s+/,' ');
  }

  // If there is anything left in the string, trim it.
  if(str) {
    str = str.trim();
  }

  return str;
};

/**
 * Removes a feed and its dependencies
 */
lucu.feed.removeById = function(db, id, onComplete) {
  var tx = db.transaction(['entry','feed'],'readwrite');
  var feedStore = tx.objectStore('feed');
  var deleteRequest = feedStore.delete(id);
  deleteRequest.onsuccess = lucu.entry.removeByFeed.bind(
    deleteRequest, tx, id, onComplete.bind(null, id));
};

lucu.feed.getAll = function(db, callback) {
  var feeds = [];
  var tx = db.transaction('feed');
  var cursorRequest = tx.objectStore('feed').openCursor();
  tx.oncomplete = callback.bind(undefined, feeds);
  cursorRequest.onsuccess = lucu.feed.getAllShift.bind(cursorRequest, feeds);
};

// Private helper for getAll
lucu.feed.getAllShift = function(feedsArray) {
  var cursor = this.result;
  if(!cursor) {
    return;
  }
  feedsArray.push(cursor.value);
  cursor.continue();
};

lucu.feed.countAll = function(db, callback) {
  var feedStore = db.transaction('feed').objectStore('feed');
  feedStore.count().onsuccess = function() {
    callback(this.result);
  };
};

// Finds the feed corresponding to the url, without regard to its scheme.
lucu.feed.findBySchemelessURL = function(db, url, callback) {
  // Uses medialize URI lib
  function filterScheme(url) {
    var uri = URI(url);
    uri.protocol('');
    var result = uri.toString().substring(2);
    // console.debug(result);
    return result;
  }

  //var schemelessURL = lucu.uri.filterScheme(url);

  var schemelessURL = filterScheme(url);
  var feedStore = db.transaction('feed').objectStore('feed');
  var schemelessIndex = feedStore.index('schemeless');
  var request = schemelessIndex.get(schemelessURL);
  request.onsuccess = lucu.feed.onFindSchemeless.bind(request, callback);
};

// Private helper
lucu.feed.onFindSchemeless = function(onComplete) {
  onComplete(this.result);
};

lucu.feed.forEach = function(db, handleFeed, onComplete, sortByTitle) {

  var tx = db.transaction('feed');
  var store;

  if(sortByTitle) {
    store = tx.objectStore('feed').index('title');
  } else {
    store = tx.objectStore('feed');
  }

  tx.oncomplete = onComplete;

  var cursorRequest = store.openCursor();
  cursorRequest.onsuccess = lucu.feed.forEachShift.bind(
    cursorRequest, handleFeed);
};

// Private helper
lucu.feed.forEachShift = function(callback) {
  var cursor = this.result;
  if(cursor) {
    callback(cursor.value);
    cursor.continue();
  }
};

