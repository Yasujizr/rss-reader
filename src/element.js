// Copyright 2014 Josh Froelich. All rights reserved.
// Use of this source code is governed by a MIT-style license
// that can be found in the LICENSE file

// TODO: deprecate filter, forEach, etc. Use lucu.array.fns instead

'use strict';

var lucu = lucu || {};
lucu.element = {};

lucu.element.forEach = function(list, fn) {

  if(!list) {
    return;
  }

  return Array.prototype.forEach.call(list, fn);
};

// Map a function over a HTMLCollection or NodeList
lucu.element.map = function(list, fn) {

  // This defensive guard lets us avoid the null check
  // in the calling context, which is typical because the list
  // is typically generated by getElementsByTagName or querySelectorAll
  // which has at times (for unknown reasons) returned undefined/null.
  if(!list) {
    return [];
  }

  return Array.prototype.map.call(list, fn);
};


/**
 * Gets the textContent of a specific element or the value of a specific
 * attribute in the element. The value of the attribute is retrieved if an
 * attribute is specified. Returns undefined if nothing matches or
 * the value for anything that did match was empty.
 *
 * Reasons why this function is useful:
 * 1) Searching for a comma separated list of selectors works in document
 * order, regardless of the order of the selectors. By using an array
 * of separate selectors, we can prioritize selector order over
 * document order in the specification.
 * 2) We sometimes want to get the value of an attribute instead of
 * the text content. Searching for the attribute involves nearly all the
 * same steps as searching for the element.
 * 3) We want to only consider non-empty values as matching.
 * querySelectorAll stops once the element matches, and does not let
 * us compose additional concise and exact conditions on the textContent
 * value or attribute value. So this function enables us to fallback to later
 * selectors by merging in the non-empty-after-trimming condition.
 * 4) We want short circuiting. querySelectorAll walks the entire
 * document every time, which is a waste.
 */
lucu.element.getTextOrAttribute = function(rootElement, selectors, attribute) {
  var getter;
  if(attribute) {
    getter = lucu.element.getAttribute.bind(this, attribute);
  } else {
    getter = lucu.element.getTextContent;
  }

  // NOTE: using a raw loop because nothing in the native iteration API
  // fits because of the need to use side effects and the need to short
  // circuit

  for(var i = 0, temp; i < selectors.length; i++) {
    temp = rootElement.querySelector(selectors[i]);
    if(!temp) continue;
    temp = getter(temp);
    if(!temp) continue;
    temp = temp.trim();
    if(!temp) continue;
    return temp;
  }
};

// Wraps element.getAttribute. Used for partial on attribute (due to arg order)
// instead of just HTMLElement.prototype.getAttribute
lucu.element.getAttribute = function(attribute, element) {
  return element.getAttribute(attribute);
};

lucu.element.getTextContent = function(element) {
  return element.textContent;
};
