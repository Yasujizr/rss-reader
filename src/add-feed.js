// Copyright 2016 Josh Froelich. All rights reserved.
// Use of this source code is governed by a MIT-style license
// that can be found in the LICENSE file

'use strict';

function addFeed(connection, feed, callback) {
  // We can't assume the Feed has been serialized before this call. Fortunately,
  // serialize is idempotent, so this is relatively harmless. This also serves
  // the purpose of cloning so that we can freely manipulate the clone without
  // side effects.
  let storableFeed = Feed.prototype.serialize.call(feed);

  // Ensure that the id property is not present, or this will cause an error
  // when using store.add
  if('id' in storableFeed) {
    console.debug('Stripping id with value "%s" before add feed',
      storableFeed.id);
    delete storableFeed.id;
  }

  storableFeed = Feed.prototype.sanitize.call(storableFeed);
  storableFeed.dateCreated = new Date();

  console.debug('Adding feed', storableFeed);

  const transaction = connection.transaction('feed', 'readwrite');
  const store = transaction.objectStore('feed');
  const request = store.add(storableFeed);

  // Only bind listeners if the optional callback is present
  if(callback) {
    request.onsuccess = onAddSuccess;
    request.onerror = onAddError;
  }

  function onAddSuccess(event) {
    // Now introduce the id generated by indexedDB's auto-increment feature
    storableFeed.id = event.target.result;

    callback({'type': 'success', 'feed': storableFeed});
  }

  function onAddError(event) {
    console.error('Error adding feed', event);
    callback({'type': event.target.error.name});
  }
}
