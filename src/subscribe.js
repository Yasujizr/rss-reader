// Copyright 2016 Josh Froelich. All rights reserved.
// Use of this source code is governed by a MIT-style license
// that can be found in the LICENSE file

'use strict';

{ // Begin file block scope

// @param feed {Feed}
// @param options {Object} optional object containing optional callback
// and optional open connection
this.subscribe = function(feed, options) {
  console.assert(feed);
  console.assert(feed.has_url());
  console.log('Subscribing to', feed.get_url().toString());

  const context = {
    'feed': feed,
    'didSubscribe': false,
    'callback': options ? options.callback : null,
    'connection': options ? options.connection : null,
    'closeConnection': false,
    'suppressNotifications': options ? options.suppressNotifications : false
  };

  if(context.connection) {
    find_feed.call(context);
  } else {
    open_db(on_open_db.bind(context));
  }
};

function on_open_db(connection) {
  if(connection) {
    this.connection = connection;
    this.closeConnection = true;
    find_feed.call(this);
  } else {
    on_complete.call(this, {'type': 'ConnectionError'});
  }
}

// Before involving any network overhead, check if already subscribed. This
// check will implicitly happen again later when inserting the feed into the
// database, so it is partially redundant, but it can reduce the amount of
// processing in the common case.
// This uses a separate transaction from the eventual add request, because
// it is not recommended to have a long running transaction, and the amount of
// work that has to occur between this exists check and the add request takes
// a somewhat indefinite period of time, given network latency.
// This does involve a race condition if calling subscribe concurrently on
// the same url, but its impact is limited. The latter http request will use
// the cached page, and the latter call will fail with a ConstraintError when
// trying to add the feed.
function find_feed() {
  const urlString = this.feed.get_url().toString();
  console.debug('Checking if subscribed to', urlString);
  const transaction = this.connection.transaction('feed');
  const store = transaction.objectStore('feed');
  const index = store.index('urls');
  const request = index.get(urlString);
  request.onsuccess = find_feed_onsuccess.bind(this);
  request.onerror = find_feed_onerror.bind(this);
}

function find_feed_onsuccess(event) {
  if(event.target.result) {
    console.debug('Already subscribed to', this.feed.get_url().toString());
    on_complete.call(this, {'type': 'ConstraintError'});
    return;
  }

  if('onLine' in navigator && !navigator.onLine) {
    add_feed.call(this, this.feed, on_add_feed.bind(this));
  } else {
    const timeoutMillis = 10 * 1000;
    const excludeEntries = true;
    fetch_feed(this.feed.get_url(), timeoutMillis, excludeEntries,
      on_fetch_feed.bind(this));
  }
}

function find_feed_onerror(event) {
  on_complete.call(this, {'type': 'FindQueryError'});
}

function on_fetch_feed(event) {
  if(event.type !== 'load') {
    on_complete.call(this, {'type': 'FetchError'});
    return;
  }

  // TODO: instead of adding the feed, this is where I should be looking for
  // the feed's favicon. We know we are probably online at this point and are
  // not subscribing while offline, and we know that the feed xml file exists.

  const feed = this.feed.merge(event.feed);
  add_feed.call(this, feed, on_add_feed.bind(this));
}

function add_feed(feed, callback) {
  console.debug('Adding feed', feed);
  console.assert(!feed.id, 'feed.id is defined', feed.id);
  const sanitizedFeed = feed.sanitize();
  sanitizedFeed.dateCreated = new Date();

  const serializedFeed = sanitizedFeed.serialize();

  // Manually remove date last modified. Because we are subscribing without
  // handling entries, we want to prevent the poll from considering the file
  // unmodified the next time it runs, to ensure that it downloads entries.
  // TODO: maybe it would be better to modify poll's last modified check to
  // also check if feed was ever polled (e.g. has dateUpdated field set)
  delete serializedFeed.dateLastModified;

  const transaction = this.connection.transaction('feed', 'readwrite');
  const store = transaction.objectStore('feed');
  const request = store.add(serializedFeed);
  if(callback) {
    request.onsuccess = addOnSuccess;
    request.onerror = addOnError;
  }

  function addOnSuccess(event) {
    // Set the id generated by indexedDB
    serializedFeed.id = event.target.result;
    callback({'type': 'success', 'feed': serializedFeed});
  }

  function addOnError(event) {
    console.error(event.target.error);
    callback({'type': event.target.error.name});
  }
}

function on_add_feed(event) {
  if(event.type === 'success') {
    this.didSubscribe = true;
    on_complete.call(this, {'type': 'success', 'feed': event.feed});
  } else {
    on_complete.call(this, {'type': event.type});
  }
}

function on_complete(event) {
  if(this.closeConnection && this.connection) {
    this.connection.close();
  }

  if(!this.suppressNotifications && this.didSubscribe) {

    // TODO: if addFeed calls back with a Feed object, then I wouldn't need
    // to use call here. This also means this passes back a Feed object instead
    // of a basic object, which means I would need to update all callers

    // TODO: the notification should probably use the feed's favicon if
    // available, and only then fall back

    notify('Subscription complete', 'Subscribed to ' + (event.feed.title ||
      Feed.prototype.get_url.call(event.feed).toString()));
  }

  if(this.callback) {
    this.callback(event);
  }
}

} // End file block scope
